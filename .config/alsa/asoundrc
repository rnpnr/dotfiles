pcm.!default {
	type asym
	playback.pcm {
		type plug
		slave.pcm pcm.softvol
	}
	capture.pcm {
		type plug
		slave.pcm pcm.dsnooper
	}
}

pcm.dup {
	type plug
	slave.pcm pcm.mdev
	route_policy "duplicate"
}

pcm.output {
	type dmix
	ipc_key 1024
	slave {
		pcm "hw:0,0"
		buffer_size 8192
		format S16_LE
		period_size 1024
		period_time 0
		rate 48000
	}
}

pcm.loop {
	type dmix
	ipc_key 1025
	slave {
		pcm "hw:Loopback,0,0"
		buffer_size 8192
		format S16_LE
		period_size 1024
		period_time 0
		rate 48000
	}
}

pcm.loopgain{
	type softvol
	slave.pcm pcm.loop
	control.name "LoopGain"
	min_dB -3.0
	max_dB 30.0
}

pcm.mdev {
	type multi
	slaves.a.pcm pcm.output
	slaves.a.channels 2
	slaves.b.pcm pcm.loopgain
	slaves.b.channels 2
	bindings.0.slave a
	bindings.0.channel 0
	bindings.1.slave a
	bindings.1.channel 1
	bindings.2.slave b
	bindings.2.channel 0
	bindings.3.slave b
	bindings.3.channel 1
}

# alias actual mic card to mic
pcm.mic {
	type hw
	card Snowball
}

pcm.dsnooper {
	type dsnoop
	ipc_key 1488
	slave {
		pcm "mic"
		channels 2
		rate 48000
		period_size 1024
		buffer_size 4096
		period_time 0
	}
}

# give mic output a volume control
pcm.micvol {
	type softvol
	slave.pcm pcm.dup
	control.name "MicVol"
}
ctl.MicVol {
	type hw
	card Snowball
}

# software volume
pcm.softvol {
	type softvol
	slave.pcm pcm.dup
	control.name "SoftVol"
}

# mpd volume control
pcm.mpd {
	type softvol
	slave.pcm pcm.dup
	control.name "MPD"
}

# mpv volume control
pcm.mpv {
	type softvol
	slave.pcm pcm.dup
	control.name "MPV"
}
